{"ast":null,"code":"import _toConsumableArray from\"D:/Rim/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React from\"react\";// Total page count is less than the page pills we want to show. In such a case we just return the range from 1 to totalPageCount.\n// Total page count is greater than the page pills but only the right DOTS are visible.\n// Total page count is greater than the page pills but only the left DOTS are visible.\n// Total page count is greater than the page pills and both the left and the right DOTS are visible.\nvar range=function range(start,end){var length=end-start+1;/*\r\n        Create an array of certain length and set the elements within it from\r\n      start value to end value.\r\n    */return Array.from({length:length},function(_,idx){return idx+start;});};export var DOTS=null;export function usePagination(_ref){var totalCount=_ref.totalCount,pageSize=_ref.pageSize,_ref$siblingCount=_ref.siblingCount,siblingCount=_ref$siblingCount===void 0?1:_ref$siblingCount,currentPage=_ref.currentPage;var paginationRange=React.useMemo(function(){var totalPageCount=Math.ceil(totalCount/pageSize);// Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\nvar totalPageNumbers=siblingCount+5;/*\r\n      Case 1:\r\n      If the number of pages is less than the page numbers we want to show in our\r\n      paginationComponent, we return the range [1..totalPageCount]\r\n    */if(totalPageNumbers>=totalPageCount){return range(1,totalPageCount);}// Calculate left and right sibling index and make sure they are within range 1 and totalPageCount\nvar leftSiblingIndex=Math.max(currentPage-siblingCount,1);var rightSiblingIndex=Math.min(currentPage+siblingCount,totalPageCount);// We do not show dots just when there is just one page number to be inserted between\n// the extremes of sibling and the page limits i.e 1 and totalPageCount.\n// Hence we are using leftSiblingIndex > 2 and rightSiblingIndex < totalPageCount - 2\nvar shouldShowLeftDots=leftSiblingIndex>2;var shouldShowRightDots=rightSiblingIndex<totalPageCount-2;var firstPageIndex=1;var lastPageIndex=totalPageCount;// Case 2: No left dots to show, but rights dots to be shown\nif(!shouldShowLeftDots&shouldShowRightDots){var leftItemCount=3+2*siblingCount;var leftRange=range(1,leftItemCount);return[].concat(_toConsumableArray(leftRange),[DOTS,totalPageCount]);}// Case 3: No right dots to show, but left dots to be shown\nif(shouldShowLeftDots&!shouldShowRightDots){var rightItemCount=3+2*siblingCount;var rightRange=range(totalPageCount-rightItemCount+1,totalPageCount);return[firstPageIndex,DOTS].concat(_toConsumableArray(rightRange));}// Case 4: Both left and right dots to be shown\nif(shouldShowLeftDots&shouldShowRightDots){var middleRange=range(leftSiblingIndex,rightSiblingIndex);return[firstPageIndex,DOTS].concat(_toConsumableArray(middleRange),[DOTS,lastPageIndex]);}},[totalCount,pageSize,siblingCount,currentPage]);return paginationRange;}","map":{"version":3,"sources":["D:/Rim/react-app/src/components/hooks/usePagination.js"],"names":["React","range","start","end","length","Array","from","_","idx","DOTS","usePagination","totalCount","pageSize","siblingCount","currentPage","paginationRange","useMemo","totalPageCount","Math","ceil","totalPageNumbers","leftSiblingIndex","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftItemCount","leftRange","rightItemCount","rightRange","middleRange"],"mappings":"+IAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA;AACA;AACA;AACA;AAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,KAAD,CAAQC,GAAR,CAAgB,CAC5B,GAAIC,CAAAA,MAAM,CAAGD,GAAG,CAAGD,KAAN,CAAc,CAA3B,CACA;AACF;AACA;AACA,MACE,MAAOG,CAAAA,KAAK,CAACC,IAAN,CAAW,CAAEF,MAAM,CAANA,MAAF,CAAX,CAAuB,SAACG,CAAD,CAAIC,GAAJ,QAAYA,CAAAA,GAAG,CAAGN,KAAlB,EAAvB,CAAP,CACD,CAPD,CASA,MAAO,IAAMO,CAAAA,IAAI,CAAG,IAAb,CAEP,MAAO,SAASC,CAAAA,aAAT,MAKJ,IAJDC,CAAAA,UAIC,MAJDA,UAIC,CAHDC,QAGC,MAHDA,QAGC,wBAFDC,YAEC,CAFDA,YAEC,4BAFc,CAEd,mBADDC,WACC,MADDA,WACC,CACD,GAAMC,CAAAA,eAAe,CAAGf,KAAK,CAACgB,OAAN,CAAc,UAAM,CAC1C,GAAMC,CAAAA,cAAc,CAAGC,IAAI,CAACC,IAAL,CAAUR,UAAU,CAAGC,QAAvB,CAAvB,CACA;AACA,GAAMQ,CAAAA,gBAAgB,CAAGP,YAAY,CAAG,CAAxC,CACA;AACJ;AACA;AACA;AACA,MACI,GAAIO,gBAAgB,EAAIH,cAAxB,CAAwC,CACtC,MAAOhB,CAAAA,KAAK,CAAC,CAAD,CAAIgB,cAAJ,CAAZ,CACD,CACD;AACA,GAAMI,CAAAA,gBAAgB,CAAGH,IAAI,CAACI,GAAL,CAASR,WAAW,CAAGD,YAAvB,CAAqC,CAArC,CAAzB,CACA,GAAMU,CAAAA,iBAAiB,CAAGL,IAAI,CAACM,GAAL,CACxBV,WAAW,CAAGD,YADU,CAExBI,cAFwB,CAA1B,CAKA;AACA;AACA;AACA,GAAMQ,CAAAA,kBAAkB,CAAGJ,gBAAgB,CAAG,CAA9C,CACA,GAAMK,CAAAA,mBAAmB,CAAGH,iBAAiB,CAAGN,cAAc,CAAG,CAAjE,CAEA,GAAMU,CAAAA,cAAc,CAAG,CAAvB,CACA,GAAMC,CAAAA,aAAa,CAAGX,cAAtB,CAEA;AACA,GAAI,CAACQ,kBAAD,CAAsBC,mBAA1B,CAA+C,CAC7C,GAAMG,CAAAA,aAAa,CAAG,EAAI,EAAIhB,YAA9B,CACA,GAAMiB,CAAAA,SAAS,CAAG7B,KAAK,CAAC,CAAD,CAAI4B,aAAJ,CAAvB,CACA,mCAAWC,SAAX,GAAsBrB,IAAtB,CAA4BQ,cAA5B,GACD,CAED;AACA,GAAIQ,kBAAkB,CAAG,CAACC,mBAA1B,CAA+C,CAC7C,GAAMK,CAAAA,cAAc,CAAG,EAAI,EAAIlB,YAA/B,CACA,GAAMmB,CAAAA,UAAU,CAAG/B,KAAK,CACtBgB,cAAc,CAAGc,cAAjB,CAAkC,CADZ,CAEtBd,cAFsB,CAAxB,CAIA,OAAQU,cAAR,CAAwBlB,IAAxB,4BAAiCuB,UAAjC,GACD,CAED;AACA,GAAIP,kBAAkB,CAAGC,mBAAzB,CAA8C,CAC5C,GAAMO,CAAAA,WAAW,CAAGhC,KAAK,CAACoB,gBAAD,CAAmBE,iBAAnB,CAAzB,CACA,OAAQI,cAAR,CAAwBlB,IAAxB,4BAAiCwB,WAAjC,GAA8CxB,IAA9C,CAAoDmB,aAApD,GACD,CACF,CAlDuB,CAkDrB,CAACjB,UAAD,CAAaC,QAAb,CAAuBC,YAAvB,CAAqCC,WAArC,CAlDqB,CAAxB,CAmDA,MAAOC,CAAAA,eAAP,CACD","sourcesContent":["import React from \"react\";\r\n\r\n// Total page count is less than the page pills we want to show. In such a case we just return the range from 1 to totalPageCount.\r\n// Total page count is greater than the page pills but only the right DOTS are visible.\r\n// Total page count is greater than the page pills but only the left DOTS are visible.\r\n// Total page count is greater than the page pills and both the left and the right DOTS are visible.\r\n\r\nconst range = (start, end) => {\r\n  let length = end - start + 1;\r\n  /*\r\n        Create an array of certain length and set the elements within it from\r\n      start value to end value.\r\n    */\r\n  return Array.from({ length }, (_, idx) => idx + start);\r\n};\r\n\r\nexport const DOTS = null;\r\n\r\nexport function usePagination({\r\n  totalCount,\r\n  pageSize,\r\n  siblingCount = 1,\r\n  currentPage,\r\n}) {\r\n  const paginationRange = React.useMemo(() => {\r\n    const totalPageCount = Math.ceil(totalCount / pageSize);\r\n    // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\r\n    const totalPageNumbers = siblingCount + 5;\r\n    /*\r\n      Case 1:\r\n      If the number of pages is less than the page numbers we want to show in our\r\n      paginationComponent, we return the range [1..totalPageCount]\r\n    */\r\n    if (totalPageNumbers >= totalPageCount) {\r\n      return range(1, totalPageCount);\r\n    }\r\n    // Calculate left and right sibling index and make sure they are within range 1 and totalPageCount\r\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\r\n    const rightSiblingIndex = Math.min(\r\n      currentPage + siblingCount,\r\n      totalPageCount\r\n    );\r\n\r\n    // We do not show dots just when there is just one page number to be inserted between\r\n    // the extremes of sibling and the page limits i.e 1 and totalPageCount.\r\n    // Hence we are using leftSiblingIndex > 2 and rightSiblingIndex < totalPageCount - 2\r\n    const shouldShowLeftDots = leftSiblingIndex > 2;\r\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\r\n\r\n    const firstPageIndex = 1;\r\n    const lastPageIndex = totalPageCount;\r\n\r\n    // Case 2: No left dots to show, but rights dots to be shown\r\n    if (!shouldShowLeftDots & shouldShowRightDots) {\r\n      const leftItemCount = 3 + 2 * siblingCount;\r\n      const leftRange = range(1, leftItemCount);\r\n      return [...leftRange, DOTS, totalPageCount];\r\n    }\r\n\r\n    // Case 3: No right dots to show, but left dots to be shown\r\n    if (shouldShowLeftDots & !shouldShowRightDots) {\r\n      const rightItemCount = 3 + 2 * siblingCount;\r\n      const rightRange = range(\r\n        totalPageCount - rightItemCount + 1,\r\n        totalPageCount\r\n      );\r\n      return [firstPageIndex, DOTS, ...rightRange];\r\n    }\r\n\r\n    // Case 4: Both left and right dots to be shown\r\n    if (shouldShowLeftDots & shouldShowRightDots) {\r\n      const middleRange = range(leftSiblingIndex, rightSiblingIndex);\r\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\r\n    }\r\n  }, [totalCount, pageSize, siblingCount, currentPage]);\r\n  return paginationRange;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}