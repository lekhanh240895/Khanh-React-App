{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport calculateDeviceInfo from \"../../services/calculateDeviceInfo\";\nexport default function useDeviceInfo() {\n  _s();\n\n  // DeviceInfo Handler\n  const [deviceInfo, setDeviceInfo] = useState(calculateDeviceInfo(window.innerWidth));\n  const onResize = React.useCallback(() => {\n    const newDeviceInfo = calculateDeviceInfo(window.innerWidth);\n\n    if (deviceInfo.device !== newDeviceInfo.device) {\n      setDeviceInfo(newDeviceInfo);\n    }\n  }, [deviceInfo]);\n  useEffect(() => {\n    window.addEventListener(\"resize\", onResize);\n    return () => {\n      window.removeEventListener(\"resize\", onResize);\n    };\n  }, [deviceInfo, onResize]);\n  return deviceInfo;\n}\n\n_s(useDeviceInfo, \"zrG28P7uIjw2oKSsjstSFkCU1cI=\");","map":{"version":3,"sources":["D:/Rim/react-app/src/components/hooks/useDeviceInfo.js"],"names":["React","useState","useEffect","calculateDeviceInfo","useDeviceInfo","deviceInfo","setDeviceInfo","window","innerWidth","onResize","useCallback","newDeviceInfo","device","addEventListener","removeEventListener"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AACtC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAC1CE,mBAAmB,CAACI,MAAM,CAACC,UAAR,CADuB,CAA5C;AAIA,QAAMC,QAAQ,GAAGT,KAAK,CAACU,WAAN,CAAkB,MAAM;AACvC,UAAMC,aAAa,GAAGR,mBAAmB,CAACI,MAAM,CAACC,UAAR,CAAzC;;AAEA,QAAIH,UAAU,CAACO,MAAX,KAAsBD,aAAa,CAACC,MAAxC,EAAgD;AAC9CN,MAAAA,aAAa,CAACK,aAAD,CAAb;AACD;AACF,GANgB,EAMd,CAACN,UAAD,CANc,CAAjB;AAQAH,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCJ,QAAlC;AACA,WAAO,MAAM;AACXF,MAAAA,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCL,QAArC;AACD,KAFD;AAGD,GALQ,EAKN,CAACJ,UAAD,EAAaI,QAAb,CALM,CAAT;AAOA,SAAOJ,UAAP;AACD;;GAtBuBD,a","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport calculateDeviceInfo from \"../../services/calculateDeviceInfo\";\r\n\r\nexport default function useDeviceInfo() {\r\n  // DeviceInfo Handler\r\n  const [deviceInfo, setDeviceInfo] = useState(\r\n    calculateDeviceInfo(window.innerWidth)\r\n  );\r\n\r\n  const onResize = React.useCallback(() => {\r\n    const newDeviceInfo = calculateDeviceInfo(window.innerWidth);\r\n\r\n    if (deviceInfo.device !== newDeviceInfo.device) {\r\n      setDeviceInfo(newDeviceInfo);\r\n    }\r\n  }, [deviceInfo]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", onResize);\r\n    return () => {\r\n      window.removeEventListener(\"resize\", onResize);\r\n    };\r\n  }, [deviceInfo, onResize]);\r\n\r\n  return deviceInfo;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}