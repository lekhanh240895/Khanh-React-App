{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { db } from \"../../firebase/config\";\nimport { collection, onSnapshot, query, where } from \"firebase/firestore\";\nexport default function useFirestore(FirestoreCollection, condition) {\n  _s();\n\n  const [documents, setDocuments] = useState([]);\n  useEffect(() => {\n    //Listen to multiple documents in collection Users\n    let collectionRef = collection(db, FirestoreCollection);\n    let q;\n\n    if (condition) {\n      if (!condition.compareValue || !condition.compareValue.length) {\n        return;\n      }\n\n      q = query(collectionRef, where(condition.fieldName, condition.operator, condition.compareValue));\n    } else {\n      q = collectionRef;\n    }\n\n    const unsub = onSnapshot(q, querySnapshot => {\n      const data = querySnapshot.docs.map(doc => ({ ...doc.data(),\n        id: doc.id\n      }));\n      setDocuments(data);\n      console.log(data);\n    });\n    return unsub;\n  }, [FirestoreCollection, condition]);\n  return documents;\n}\n\n_s(useFirestore, \"yer53JIs/Enm5EWW99jBywEKfS0=\");","map":{"version":3,"sources":["D:/Rim/react-app/src/components/hooks/useFirestore.js"],"names":["useEffect","useState","db","collection","onSnapshot","query","where","useFirestore","FirestoreCollection","condition","documents","setDocuments","collectionRef","q","compareValue","length","fieldName","operator","unsub","querySnapshot","data","docs","map","doc","id","console","log"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,EAAT,QAAmB,uBAAnB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,KAAjC,EAAwCC,KAAxC,QAAqD,oBAArD;AAEA,eAAe,SAASC,YAAT,CAAsBC,mBAAtB,EAA2CC,SAA3C,EAAsD;AAAA;;AACnE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIY,aAAa,GAAGT,UAAU,CAACD,EAAD,EAAKM,mBAAL,CAA9B;AACA,QAAIK,CAAJ;;AAEA,QAAIJ,SAAJ,EAAe;AACb,UAAI,CAACA,SAAS,CAACK,YAAX,IAA2B,CAACL,SAAS,CAACK,YAAV,CAAuBC,MAAvD,EAA+D;AAC7D;AACD;;AAEDF,MAAAA,CAAC,GAAGR,KAAK,CACPO,aADO,EAEPN,KAAK,CAACG,SAAS,CAACO,SAAX,EAAsBP,SAAS,CAACQ,QAAhC,EAA0CR,SAAS,CAACK,YAApD,CAFE,CAAT;AAID,KATD,MASO;AACLD,MAAAA,CAAC,GAAGD,aAAJ;AACD;;AAED,UAAMM,KAAK,GAAGd,UAAU,CAACS,CAAD,EAAKM,aAAD,IAAmB;AAC7C,YAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAwBC,GAAD,KAAU,EAC5C,GAAGA,GAAG,CAACH,IAAJ,EADyC;AAE5CI,QAAAA,EAAE,EAAED,GAAG,CAACC;AAFoC,OAAV,CAAvB,CAAb;AAIAb,MAAAA,YAAY,CAACS,IAAD,CAAZ;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACD,KAPuB,CAAxB;AASA,WAAOF,KAAP;AACD,GA5BQ,EA4BN,CAACV,mBAAD,EAAsBC,SAAtB,CA5BM,CAAT;AA8BA,SAAOC,SAAP;AACD;;GAjCuBH,Y","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { db } from \"../../firebase/config\";\r\nimport { collection, onSnapshot, query, where } from \"firebase/firestore\";\r\n\r\nexport default function useFirestore(FirestoreCollection, condition) {\r\n  const [documents, setDocuments] = useState([]);\r\n  useEffect(() => {\r\n    //Listen to multiple documents in collection Users\r\n    let collectionRef = collection(db, FirestoreCollection);\r\n    let q;\r\n\r\n    if (condition) {\r\n      if (!condition.compareValue || !condition.compareValue.length) {\r\n        return;\r\n      }\r\n\r\n      q = query(\r\n        collectionRef,\r\n        where(condition.fieldName, condition.operator, condition.compareValue)\r\n      );\r\n    } else {\r\n      q = collectionRef;\r\n    }\r\n\r\n    const unsub = onSnapshot(q, (querySnapshot) => {\r\n      const data = querySnapshot.docs.map((doc) => ({\r\n        ...doc.data(),\r\n        id: doc.id,\r\n      }));\r\n      setDocuments(data);\r\n      console.log(data);\r\n    });\r\n\r\n    return unsub;\r\n  }, [FirestoreCollection, condition]);\r\n\r\n  return documents;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}