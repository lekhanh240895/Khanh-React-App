{"ast":null,"code":"// import { useEffect, useState } from \"react\";\n// import { db } from \"../../firebase/config\";\n// import {\n//   collection,\n//   onSnapshot,\n//   query,\n//   orderBy,\n//   where,\n//   setDoc,\n//   doc,\n//   getDoc,\n// } from \"firebase/firestore\";\n// export async function useFilestore(collections, condition) {\n//   const [documents, setDocuments] = useState([]);\n//   useEffect(() => {\n//     let collectionRef = collection(db, collections);\n//     const q = query(collectionRef, orderBy(\"createdAt\"), condition);\n//     const unsubcribe = onSnapshot(q, (snapshot) => {\n//       if (condition) {\n//         if (!condition.compareValue || !condition.compareValue.length) {\n//           return;\n//         }\n//         collectionRef = collectionRef.where(\n//           condition.fieldValue,\n//           condition.operator,\n//           condition.compareValue\n//         );\n//       }\n//       const data = snapshot.docs.map((doc) => ({\n//         ...doc.data(),\n//         id: doc.id,\n//       }));\n//       setDocuments(data);\n//     });\n//     return unsubcribe;\n//   }, [collections, condition]);\n//   return documents;\n// }","map":{"version":3,"sources":["D:/Rim/react-app/src/components/hooks/useFilestore.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["// import { useEffect, useState } from \"react\";\r\n// import { db } from \"../../firebase/config\";\r\n// import {\r\n//   collection,\r\n//   onSnapshot,\r\n//   query,\r\n//   orderBy,\r\n//   where,\r\n//   setDoc,\r\n//   doc,\r\n//   getDoc,\r\n// } from \"firebase/firestore\";\r\n\r\n// export async function useFilestore(collections, condition) {\r\n  \r\n\r\n//   const [documents, setDocuments] = useState([]);\r\n//   useEffect(() => {\r\n//     let collectionRef = collection(db, collections);\r\n//     const q = query(collectionRef, orderBy(\"createdAt\"), condition);\r\n//     const unsubcribe = onSnapshot(q, (snapshot) => {\r\n//       if (condition) {\r\n//         if (!condition.compareValue || !condition.compareValue.length) {\r\n//           return;\r\n//         }\r\n//         collectionRef = collectionRef.where(\r\n//           condition.fieldValue,\r\n//           condition.operator,\r\n//           condition.compareValue\r\n//         );\r\n//       }\r\n\r\n//       const data = snapshot.docs.map((doc) => ({\r\n//         ...doc.data(),\r\n//         id: doc.id,\r\n//       }));\r\n//       setDocuments(data);\r\n//     });\r\n//     return unsubcribe;\r\n//   }, [collections, condition]);\r\n\r\n//   return documents;\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}