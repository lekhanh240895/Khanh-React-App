{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\"; // Total page count is less than the page pills we want to show. In such a case we just return the range from 1 to totalPageCount.\n// Total page count is greater than the page pills but only the right DOTS are visible.\n// Total page count is greater than the page pills but only the left DOTS are visible.\n// Total page count is greater than the page pills and both the left and the right DOTS are visible.\n\nconst range = (start, end) => {\n  let length = end - start + 1;\n  /*\r\n      Create an array of certain length and set the elements within it from\r\n    start value to end value.\r\n  */\n\n  return Array.from({\n    length\n  }, (_, idx) => idx + start);\n};\n\nexport default function usePagination({\n  totalCount,\n  pageSize,\n  siblingCount = 1,\n  currentPage\n}) {\n  _s();\n\n  const paginationRange = React.useMemo(() => {\n    const totalPageCount = Math.ceil(totalCount / pageSize); // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\n\n    const totalPageNumbers = siblingCount + 5;\n    /*\r\n      Case 1:\r\n      If the number of pages is less than the page numbers we want to show in our\r\n      paginationComponent, we return the range [1..totalPageCount]\r\n    */\n\n    if (totalPageNumbers >= totalPageCount) {\n      return range(1, totalPageCount);\n    } // Calculate left and right sibling index and make sure they are within range 1 and totalPageCount\n\n\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount); // We do not show dots just when there is just one page number to be inserted between \n    // the extremes of sibling and the page limits i.e 1 and totalPageCount. \n    // Hence we are using leftSiblingIndex > 2 and rightSiblingIndex < totalPageCount - 2\n\n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n    const DOTS = \"&#8230;\";\n    const firstPageIndex = 1;\n    const lastPageIndex = totalPageCount; // Case 2: No left dots to show, but rights dots to be shown\n\n    if (!shouldShowLeftDots & shouldShowRightDots) {\n      const leftItemCount = 3 + 2 * siblingCount;\n      const leftRange = range(1, leftItemCount);\n      return [...leftRange, DOTS, totalPageCount];\n    } // Case 3: No right dots to show, but left dots to be shown\n\n\n    if (shouldShowLeftDots & !shouldShowRightDots) {\n      const rightItemCount = 3 + 2 * siblingCount;\n      const rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount);\n      return [firstPageIndex, DOTS, ...rightRange];\n    } // Case 4: Both left and right dots to be shown\n\n\n    if (shouldShowLeftDots & shouldShowRightDots) {\n      const middleRange = range(leftSiblingIndex, rightSiblingIndex);\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\n    }\n  }, [totalCount, pageSize, siblingCount, currentPage]);\n  return paginationRange;\n}\n\n_s(usePagination, \"tLviJI6rwkyze3+kNwkFLwjvB48=\");","map":{"version":3,"sources":["D:/Rim/react-app/src/components/usePagination.js"],"names":["React","range","start","end","length","Array","from","_","idx","usePagination","totalCount","pageSize","siblingCount","currentPage","paginationRange","useMemo","totalPageCount","Math","ceil","totalPageNumbers","leftSiblingIndex","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","DOTS","firstPageIndex","lastPageIndex","leftItemCount","leftRange","rightItemCount","rightRange","middleRange"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;;AAEA,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC1B,MAAIC,MAAM,GAAGD,GAAG,GAAGD,KAAN,GAAc,CAA3B;AACA;AACJ;AACA;AACA;;AACI,SAAOG,KAAK,CAACC,IAAN,CAAW;AAAEF,IAAAA;AAAF,GAAX,EAAuB,CAACG,CAAD,EAAIC,GAAJ,KAAYA,GAAG,GAAGN,KAAzC,CAAP;AACD,CAPH;;AASA,eAAe,SAASO,aAAT,CAAuB;AACpCC,EAAAA,UADoC;AAEpCC,EAAAA,QAFoC;AAGpCC,EAAAA,YAAY,GAAG,CAHqB;AAIpCC,EAAAA;AAJoC,CAAvB,EAKZ;AAAA;;AACD,QAAMC,eAAe,GAAGd,KAAK,CAACe,OAAN,CAAc,MAAM;AAC1C,UAAMC,cAAc,GAAGC,IAAI,CAACC,IAAL,CAAUR,UAAU,GAAGC,QAAvB,CAAvB,CAD0C,CAE1C;;AACA,UAAMQ,gBAAgB,GAAGP,YAAY,GAAG,CAAxC;AACA;AACJ;AACA;AACA;AACA;;AACI,QAAIO,gBAAgB,IAAIH,cAAxB,EAAwC;AACpC,aAAOf,KAAK,CAAC,CAAD,EAAIe,cAAJ,CAAZ;AACH,KAXyC,CAY1C;;;AACA,UAAMI,gBAAgB,GAAGH,IAAI,CAACI,GAAL,CAASR,WAAW,GAAGD,YAAvB,EAAqC,CAArC,CAAzB;AACA,UAAMU,iBAAiB,GAAGL,IAAI,CAACM,GAAL,CAASV,WAAW,GAAGD,YAAvB,EAAqCI,cAArC,CAA1B,CAd0C,CAgB1C;AACA;AACA;;AACA,UAAMQ,kBAAkB,GAAGJ,gBAAgB,GAAG,CAA9C;AACA,UAAMK,mBAAmB,GAAGH,iBAAiB,GAAGN,cAAc,GAAG,CAAjE;AAEA,UAAMU,IAAI,GAAG,SAAb;AACA,UAAMC,cAAc,GAAG,CAAvB;AACA,UAAMC,aAAa,GAAGZ,cAAtB,CAxB0C,CA0B1C;;AACA,QAAI,CAACQ,kBAAD,GAAsBC,mBAA1B,EAA+C;AAC3C,YAAMI,aAAa,GAAG,IAAI,IAAEjB,YAA5B;AACA,YAAMkB,SAAS,GAAG7B,KAAK,CAAC,CAAD,EAAI4B,aAAJ,CAAvB;AACA,aAAO,CAAC,GAAGC,SAAJ,EAAeJ,IAAf,EAAqBV,cAArB,CAAP;AACH,KA/ByC,CAiC1C;;;AACA,QAAIQ,kBAAkB,GAAG,CAACC,mBAA1B,EAA+C;AAC3C,YAAMM,cAAc,GAAG,IAAE,IAAEnB,YAA3B;AACA,YAAMoB,UAAU,GAAG/B,KAAK,CAACe,cAAc,GAAGe,cAAjB,GAAkC,CAAnC,EAAsCf,cAAtC,CAAxB;AACA,aAAO,CAACW,cAAD,EAAiBD,IAAjB,EAAuB,GAAGM,UAA1B,CAAP;AACH,KAtCyC,CAwC1C;;;AACA,QAAIR,kBAAkB,GAAGC,mBAAzB,EAA8C;AAC1C,YAAMQ,WAAW,GAAGhC,KAAK,CAACmB,gBAAD,EAAmBE,iBAAnB,CAAzB;AACA,aAAO,CAACK,cAAD,EAAiBD,IAAjB,EAAuB,GAAGO,WAA1B,EAAuCP,IAAvC,EAA6CE,aAA7C,CAAP;AACH;AACF,GA7CuB,EA6CrB,CAAClB,UAAD,EAAaC,QAAb,EAAuBC,YAAvB,EAAqCC,WAArC,CA7CqB,CAAxB;AA8CA,SAAOC,eAAP;AACD;;GArDuBL,a","sourcesContent":["import React from \"react\";\r\n\r\n// Total page count is less than the page pills we want to show. In such a case we just return the range from 1 to totalPageCount.\r\n// Total page count is greater than the page pills but only the right DOTS are visible.\r\n// Total page count is greater than the page pills but only the left DOTS are visible.\r\n// Total page count is greater than the page pills and both the left and the right DOTS are visible.\r\n\r\nconst range = (start, end) => {\r\n    let length = end - start + 1;\r\n    /*\r\n        Create an array of certain length and set the elements within it from\r\n      start value to end value.\r\n    */\r\n    return Array.from({ length }, (_, idx) => idx + start);\r\n  };\r\n\r\nexport default function usePagination({\r\n  totalCount,\r\n  pageSize,\r\n  siblingCount = 1,\r\n  currentPage,\r\n}) {\r\n  const paginationRange = React.useMemo(() => {\r\n    const totalPageCount = Math.ceil(totalCount / pageSize);\r\n    // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\r\n    const totalPageNumbers = siblingCount + 5;\r\n    /*\r\n      Case 1:\r\n      If the number of pages is less than the page numbers we want to show in our\r\n      paginationComponent, we return the range [1..totalPageCount]\r\n    */\r\n    if (totalPageNumbers >= totalPageCount) {\r\n        return range(1, totalPageCount)\r\n    }\r\n    // Calculate left and right sibling index and make sure they are within range 1 and totalPageCount\r\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\r\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount);\r\n\r\n    // We do not show dots just when there is just one page number to be inserted between \r\n    // the extremes of sibling and the page limits i.e 1 and totalPageCount. \r\n    // Hence we are using leftSiblingIndex > 2 and rightSiblingIndex < totalPageCount - 2\r\n    const shouldShowLeftDots = leftSiblingIndex > 2;\r\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\r\n\r\n    const DOTS = \"&#8230;\";\r\n    const firstPageIndex = 1;\r\n    const lastPageIndex = totalPageCount;\r\n\r\n    // Case 2: No left dots to show, but rights dots to be shown\r\n    if (!shouldShowLeftDots & shouldShowRightDots) {\r\n        const leftItemCount = 3 + 2*siblingCount;\r\n        const leftRange = range(1, leftItemCount);\r\n        return [...leftRange, DOTS, totalPageCount];\r\n    }\r\n\r\n    // Case 3: No right dots to show, but left dots to be shown\r\n    if (shouldShowLeftDots & !shouldShowRightDots) {\r\n        const rightItemCount = 3+2*siblingCount;\r\n        const rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount)\r\n        return [firstPageIndex, DOTS, ...rightRange]\r\n    }\r\n\r\n    // Case 4: Both left and right dots to be shown\r\n    if (shouldShowLeftDots & shouldShowRightDots) {\r\n        const middleRange = range(leftSiblingIndex, rightSiblingIndex)\r\n        return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex]\r\n    }\r\n  }, [totalCount, pageSize, siblingCount, currentPage]);\r\n  return paginationRange;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}