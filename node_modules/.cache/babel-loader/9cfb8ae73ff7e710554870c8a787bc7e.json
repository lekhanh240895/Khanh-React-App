{"ast":null,"code":"var _jsxFileName = \"D:\\\\Rim\\\\react-app\\\\src\\\\components\\\\Homepage\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { ProgressBar, Alert } from \"react-bootstrap\";\nimport { storage } from \"../../firebase/config\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Homepage() {\n  _s();\n\n  const [images, setImages] = useState([]);\n  const [urls, setUrls] = useState([]);\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState();\n\n  const handleInputChange = e => {\n    for (let i = 0; i < e.target.files.length; i++) {\n      setImages(prevState => [...prevState, e.target.files[i]]);\n    }\n  };\n\n  console.log(images);\n\n  const handleUploadImages = () => {\n    const promises = [];\n    images.forEach(image => {\n      const imagesRef = ref(storage, \"images/\" + image.name);\n      const metadata = {\n        contentType: \"image/jpeg\"\n      };\n      setProgress(true);\n      const uploadTask = uploadBytesResumable(imagesRef, image, metadata);\n      promises.push(uploadTask);\n      uploadTask.on(\"state_changed\", snapshot => {\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n        setProgress(progress);\n      }, error => setError(error.message), async () => {\n        const url = await getDownloadURL(imagesRef);\n        setUrls(prevState => [...prevState, url]);\n      });\n    });\n    Promise.all(promises).then(() => {\n      return setProgress(false), alert(\"Upload Multiple Files Successfull\");\n    }).catch(error => setError(error.message));\n  };\n\n  console.log({\n    urls\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this), !progress && /*#__PURE__*/_jsxDEV(ProgressBar, {\n      now: progress,\n      max: \"100\",\n      label: `Loading...${progress}%`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Homepage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      multiple: true,\n      type: \"file\",\n      onChange: e => handleInputChange(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUploadImages,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Homepage, \"pZcertJnAAN6g8ZKVVxxfV+BhTw=\");\n\n_c = Homepage;\n\nvar _c;\n\n$RefreshReg$(_c, \"Homepage\");","map":{"version":3,"sources":["D:/Rim/react-app/src/components/Homepage/index.js"],"names":["React","useState","ProgressBar","Alert","storage","ref","uploadBytesResumable","getDownloadURL","Homepage","images","setImages","urls","setUrls","progress","setProgress","error","setError","handleInputChange","e","i","target","files","length","prevState","console","log","handleUploadImages","promises","forEach","image","imagesRef","name","metadata","contentType","uploadTask","push","on","snapshot","bytesTransferred","totalBytes","message","url","Promise","all","then","alert","catch"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { ProgressBar, Alert } from \"react-bootstrap\";\r\nimport { storage } from \"../../firebase/config\";\r\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\n\r\nexport default function Homepage() {\r\n  const [images, setImages] = useState([]);\r\n  const [urls, setUrls] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState();\r\n\r\n  const handleInputChange = (e) => {\r\n    for (let i = 0; i < e.target.files.length; i++) {\r\n      setImages((prevState) => [...prevState, e.target.files[i]]);\r\n    }\r\n  };\r\n\r\n  console.log(images);\r\n\r\n  const handleUploadImages = () => {\r\n    const promises = [];\r\n    images.forEach((image) => {\r\n      const imagesRef = ref(storage, \"images/\" + image.name);\r\n      const metadata = {\r\n        contentType: \"image/jpeg\",\r\n      };\r\n      setProgress(true);\r\n      const uploadTask = uploadBytesResumable(imagesRef, image, metadata);\r\n      promises.push(uploadTask);\r\n\r\n      uploadTask.on(\r\n        \"state_changed\",\r\n        (snapshot) => {\r\n          const progress =\r\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n          setProgress(progress);\r\n        },\r\n        (error) => setError(error.message),\r\n        async () => {\r\n          const url = await getDownloadURL(imagesRef);\r\n          setUrls((prevState) => [...prevState, url]);\r\n        }\r\n      );\r\n    });\r\n\r\n    Promise.all(promises)\r\n      .then(() => {\r\n        return setProgress(false), alert(\"Upload Multiple Files Successfull\");\r\n      })\r\n      .catch((error) => setError(error.message));\r\n  };\r\n\r\n  console.log({ urls });\r\n  return (\r\n    <div>\r\n      {error && <Alert variant=\"danger\">{error}</Alert>}\r\n      {!progress && (\r\n        <ProgressBar\r\n          now={progress}\r\n          max=\"100\"\r\n          label={`Loading...${progress}%`}\r\n        />\r\n      )}\r\n      <h1>Homepage</h1>\r\n      <input multiple type=\"file\" onChange={(e) => handleInputChange(e)} />\r\n      <button onClick={handleUploadImages}>Upload</button>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}