{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { db } from \"../../firebase/config\";\nimport { collection, onSnapshot, query, orderBy, where } from \"firebase/firestore\"; // export function useFilestore(FirestoreCollection, condition) {\n//   const [documents, setDocuments] = useState([]);\n//   useEffect(() => {\n//     let collectionRef = collection(db, FirestoreCollection);\n//     const q = query(collectionRef, orderBy(\"createdAt\"), condition);\n//     const unsubcribe = onSnapshot(q, (snapshot) => {\n//       if (condition) {\n//         if (!condition.compareValue || !condition.compareValue.length) {\n//           return;\n//         }\n//         collectionRef = collectionRef.where(\n//           condition.fieldValue,\n//           condition.operator,\n//           condition.compareValue\n//         );\n//       }\n//       const data = snapshot.docs.map((doc) => ({\n//         ...doc.data(),\n//         id: doc.id,\n//       }));\n//       setDocuments(data);\n//     });\n//     return unsubcribe;\n//   }, [collections, condition]);\n//   return documents;\n// }\n\nexport default function useFirestore(FirestoreCollection, condition) {\n  _s();\n\n  const [documents, setDocuments] = useState([]);\n  useEffect(() => {\n    //Listen to multiple documents in collection Users\n    let collectionRef = collection(db, FirestoreCollection);\n    let q;\n\n    if (condition) {\n      if (!condition.compareValue || !condition.compareValue.length) {\n        return;\n      }\n\n      q = query(collectionRef, where(condition.fieldName, condition.operator, condition.compareValue));\n    }\n\n    const unsub = onSnapshot(q, querySnapshot => {\n      const data = querySnapshot.docs.map(doc => ({ ...doc.data(),\n        id: doc.id\n      }));\n      setDocuments(data);\n    });\n    return unsub;\n  }, [FirestoreCollection, condition]);\n  return documents;\n}\n\n_s(useFirestore, \"yer53JIs/Enm5EWW99jBywEKfS0=\");","map":{"version":3,"sources":["D:/Rim/react-app/src/components/hooks/useFirestore.js"],"names":["useEffect","useState","db","collection","onSnapshot","query","orderBy","where","useFirestore","FirestoreCollection","condition","documents","setDocuments","collectionRef","q","compareValue","length","fieldName","operator","unsub","querySnapshot","data","docs","map","doc","id"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,EAAT,QAAmB,uBAAnB;AACA,SACEC,UADF,EAEEC,UAFF,EAGEC,KAHF,EAIEC,OAJF,EAKEC,KALF,QAMO,oBANP,C,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,eAAe,SAASC,YAAT,CAAsBC,mBAAtB,EAA2CC,SAA3C,EAAsD;AAAA;;AACnE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIa,aAAa,GAAGV,UAAU,CAACD,EAAD,EAAKO,mBAAL,CAA9B;AACA,QAAIK,CAAJ;;AAEA,QAAIJ,SAAJ,EAAe;AACb,UAAI,CAACA,SAAS,CAACK,YAAX,IAA2B,CAACL,SAAS,CAACK,YAAV,CAAuBC,MAAvD,EAA+D;AAC7D;AACD;;AAEDF,MAAAA,CAAC,GAAGT,KAAK,CACPQ,aADO,EAEPN,KAAK,CAACG,SAAS,CAACO,SAAX,EAAsBP,SAAS,CAACQ,QAAhC,EAA0CR,SAAS,CAACK,YAApD,CAFE,CAAT;AAID;;AAED,UAAMI,KAAK,GAAGf,UAAU,CAACU,CAAD,EAAKM,aAAD,IAAmB;AAC7C,YAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAwBC,GAAD,KAAU,EAC5C,GAAGA,GAAG,CAACH,IAAJ,EADyC;AAE5CI,QAAAA,EAAE,EAAED,GAAG,CAACC;AAFoC,OAAV,CAAvB,CAAb;AAIAb,MAAAA,YAAY,CAACS,IAAD,CAAZ;AACD,KANuB,CAAxB;AAQA,WAAOF,KAAP;AACD,GAzBQ,EAyBN,CAACV,mBAAD,EAAsBC,SAAtB,CAzBM,CAAT;AA2BA,SAAOC,SAAP;AACD;;GA9BuBH,Y","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { db } from \"../../firebase/config\";\r\nimport {\r\n  collection,\r\n  onSnapshot,\r\n  query,\r\n  orderBy,\r\n  where,\r\n} from \"firebase/firestore\";\r\n\r\n// export function useFilestore(FirestoreCollection, condition) {\r\n//   const [documents, setDocuments] = useState([]);\r\n//   useEffect(() => {\r\n//     let collectionRef = collection(db, FirestoreCollection);\r\n//     const q = query(collectionRef, orderBy(\"createdAt\"), condition);\r\n//     const unsubcribe = onSnapshot(q, (snapshot) => {\r\n//       if (condition) {\r\n//         if (!condition.compareValue || !condition.compareValue.length) {\r\n//           return;\r\n//         }\r\n//         collectionRef = collectionRef.where(\r\n//           condition.fieldValue,\r\n//           condition.operator,\r\n//           condition.compareValue\r\n//         );\r\n//       }\r\n\r\n//       const data = snapshot.docs.map((doc) => ({\r\n//         ...doc.data(),\r\n//         id: doc.id,\r\n//       }));\r\n//       setDocuments(data);\r\n//     });\r\n//     return unsubcribe;\r\n//   }, [collections, condition]);\r\n\r\n//   return documents;\r\n// }\r\n\r\nexport default function useFirestore(FirestoreCollection, condition) {\r\n  const [documents, setDocuments] = useState([]);\r\n  useEffect(() => {\r\n    //Listen to multiple documents in collection Users\r\n    let collectionRef = collection(db, FirestoreCollection);\r\n    let q;\r\n\r\n    if (condition) {\r\n      if (!condition.compareValue || !condition.compareValue.length) {\r\n        return;\r\n      }\r\n\r\n      q = query(\r\n        collectionRef,\r\n        where(condition.fieldName, condition.operator, condition.compareValue)\r\n      );\r\n    }\r\n\r\n    const unsub = onSnapshot(q, (querySnapshot) => {\r\n      const data = querySnapshot.docs.map((doc) => ({\r\n        ...doc.data(),\r\n        id: doc.id,\r\n      }));\r\n      setDocuments(data);\r\n    });\r\n\r\n    return unsub;\r\n  }, [FirestoreCollection, condition]);\r\n\r\n  return documents;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}